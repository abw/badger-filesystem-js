import{_ as e,c as a,o as t,a2 as r}from"./chunks/framework.D9vdFLUf.js";const f=JSON.parse('{"title":"Path Base Class","description":"","frontmatter":{},"headers":[],"relativePath":"path.md","filePath":"path.md","lastUpdated":null}'),s={name:"path.md"},o=r('<h1 id="path-base-class" tabindex="-1">Path Base Class <a class="header-anchor" href="#path-base-class" aria-label="Permalink to &quot;Path Base Class&quot;">​</a></h1><p>The <a href="./files.html"><code>File</code></a> and <a href="./directories.html"><code>Directory</code></a> objects are subclasses of the <code>Path</code> base class which implements some common functionality.</p><h2 id="path" tabindex="-1">path(name) <a class="header-anchor" href="#path" aria-label="Permalink to &quot;path(name) {#path}&quot;">​</a></h2><p>When called without arguments it returns the current value for the path.</p><p>When passed one or more arguments it constructs a path relative to the current one.</p><h2 id="type" tabindex="-1">type() <a class="header-anchor" href="#type" aria-label="Permalink to &quot;type() {#type}&quot;">​</a></h2><p>Returns the type of file that the path represents: <code>file</code>, <code>directory</code> or <code>path</code>.</p><p>This is set by the constructors for the <a href="./files.html"><code>File</code></a> and <a href="./directories.html"><code>Directory</code></a> objects and only represents the type of subclass object that was created.</p><p>There is no guarantee that the actual file or directory represented by the path exists in the filesystem and has the same type. Use the <a href="#isFile"><code>isFile()</code></a> and <a href="#isDirectory"><code>isDirectory()</code></a> methods if you want to check the filesystem to be sure.</p><h2 id="parse" tabindex="-1">parse() <a class="header-anchor" href="#parse" aria-label="Permalink to &quot;parse() {#parse}&quot;">​</a></h2><p>Parses the path using <a href="https://nodejs.org/api/path.html#pathparsepath" target="_blank" rel="noreferrer">Path.parse()</a> to return the constituent parts. This is cached internally. You can call <a href="#unparse"><code>unparse()</code></a> to clear the cache.</p><h2 id="unparse" tabindex="-1">unparse() <a class="header-anchor" href="#unparse" aria-label="Permalink to &quot;unparse() {#unparse}&quot;">​</a></h2><p>Deletes any cache results from <a href="#parse"><code>parse()</code></a>.</p><h2 id="dirname" tabindex="-1">dirname() <a class="header-anchor" href="#dirname" aria-label="Permalink to &quot;dirname() {#dirname}&quot;">​</a></h2><p>Returns the name of the directory.</p><h2 id="base" tabindex="-1">base() <a class="header-anchor" href="#base" aria-label="Permalink to &quot;base() {#base}&quot;">​</a></h2><p>Returns the complete file or directory name, including any extension.</p><h2 id="name" tabindex="-1">name() <a class="header-anchor" href="#name" aria-label="Permalink to &quot;name() {#name}&quot;">​</a></h2><p>Returns the name of the directory or file without any extension.</p><h2 id="ext" tabindex="-1">ext() <a class="header-anchor" href="#ext" aria-label="Permalink to &quot;ext() {#ext}&quot;">​</a></h2><p>Returns the filename extension including the period.</p><h2 id="relativePath" tabindex="-1">relativePath(name) <a class="header-anchor" href="#relativePath" aria-label="Permalink to &quot;relativePath(name) {#relativePath}&quot;">​</a></h2><p>Returns a path relative to the current one.</p><h2 id="exists" tabindex="-1">exists() <a class="header-anchor" href="#exists" aria-label="Permalink to &quot;exists() {#exists}&quot;">​</a></h2><p>Asynchronous method to test if the path exists.</p><h2 id="stat" tabindex="-1">stat() <a class="header-anchor" href="#stat" aria-label="Permalink to &quot;stat() {#stat}&quot;">​</a></h2><p>Asynchronous method to fetch stats for the path. By calling <a href="https://nodejs.org/api/fs.html#fspromisesstatpath-options" target="_blank" rel="noreferrer">fsPromises.stat()</a>.</p><p>Stats are cached internally. You can call <a href="#unstat--">unstat()</a> to clear the cache.</p><h2 id="unstat" tabindex="-1">unstat() <a class="header-anchor" href="#unstat" aria-label="Permalink to &quot;unstat() {#unstat}&quot;">​</a></h2><p>Deletes any cached results from <a href="#stat"><code>stat()</code></a>.</p><h2 id="isFile" tabindex="-1">isFile() <a class="header-anchor" href="#isFile" aria-label="Permalink to &quot;isFile() {#isFile}&quot;">​</a></h2><p>Asynchronous method which resolves to a boolean flag to indicate if the item is a file.</p><h2 id="isDirectory" tabindex="-1">isDirectory() <a class="header-anchor" href="#isDirectory" aria-label="Permalink to &quot;isDirectory() {#isDirectory}&quot;">​</a></h2><p>Asynchronous method which resolves to a boolean flag to indicate if the item is a directory.</p><h2 id="mode" tabindex="-1">mode() <a class="header-anchor" href="#mode" aria-label="Permalink to &quot;mode() {#mode}&quot;">​</a></h2><p>Asynchronous method which resolves to the file mode.</p><h2 id="size" tabindex="-1">size() <a class="header-anchor" href="#size" aria-label="Permalink to &quot;size() {#size}&quot;">​</a></h2><p>Asynchronous method which resolves to the file size in bytes.</p><h2 id="accessed" tabindex="-1">accessed() <a class="header-anchor" href="#accessed" aria-label="Permalink to &quot;accessed() {#accessed}&quot;">​</a></h2><p>Asynchronous method which resolves to a Date representing the time the file was last accessed.</p><h2 id="modified" tabindex="-1">modified() <a class="header-anchor" href="#modified" aria-label="Permalink to &quot;modified() {#modified}&quot;">​</a></h2><p>Asynchronous method which resolves to a Date representing the time the file content was last modified.</p><h2 id="changed" tabindex="-1">changed() <a class="header-anchor" href="#changed" aria-label="Permalink to &quot;changed() {#changed}&quot;">​</a></h2><p>Asynchronous method which resolves to a Date representing the time the file status (e.g. mode, owner, etc) was last changed.</p><h2 id="created" tabindex="-1">created() <a class="header-anchor" href="#created" aria-label="Permalink to &quot;created() {#created}&quot;">​</a></h2><p>Asynchronous method which resolves to a Date representing the time the file was created.</p>',46),h=[o];function i(n,c,l,d,p,u){return t(),a("div",null,h)}const b=e(s,[["render",i]]);export{f as __pageData,b as default};
